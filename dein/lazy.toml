[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # vimヘルプ日本語化
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
on_event = 'BufRead'
hook_add = '''
" if hidden is not set, TextEdit might fail.
set hidden
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> <leader>[ <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> <leader>] <Plug>(coc-references)
" Remap for rename current word
nmap <leader>r <Plug>(coc-rename)
" Remap for do codeAction of current line
" nmap <leader>i  <Plug>(coc-codeaction)
nmap <leader>i :<C-u>CocAction<CR>
nmap <silent> <expr><leader><Space> ":<C-u>call CocActionAsync('doHover')<CR>"
nmap <leader>d :<C-u>CocList diagnostics<CR>

" scss support for coc-css
autocmd FileType scss setl iskeyword+=@-@
'''
hook_post_update = '''
CocInstall coc-tsserver
CocInstall coc-angular
CocInstall coc-prettier
CocInstall coc-eslint
CocInstall coc-json
CocInstall coc-html
CocInstall coc-css
CocInstall coc-clangd
CocInstall coc-rust-analyzer
CocInstall coc-tailwindcss
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
on_event = 'BufRead'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
on_event = 'BufRead'


[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'lambdalisue/fern.vim'
depends = ['FixCursorHold.nvim']
hook_add = '''
nnoremap <leader>g :<C-u>Fern . -reveal=%<CR>
nnoremap <leader>h :<C-u>Fern %:h<CR>
function! s:init_fern() abort
  " fern開く前のファイルと選択したファイルがvsplitで開かれている状態にする
  nmap <buffer> <leader>v <Plug>(fern-action-open:vsplit)<C-w>l<C-o><C-w>h
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
'''

[[plugins]]
repo =  'mzlogin/vim-markdown-toc'
on_ft = 'markdown'

